{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "374cbdcb",
   "metadata": {},
   "source": "## Single Inventory on hand and available check"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Define functions",
   "id": "ede9a5a15992f65b"
  },
  {
   "cell_type": "code",
   "id": "9337b35b",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:35.303818Z",
     "start_time": "2024-05-31T19:04:33.738387Z"
    }
   },
   "source": [
    "import pandas as pd\n",
    "\n",
    "# check if string starts with IF\n",
    "def starts_with_IF(string):\n",
    "    if string.startswith('IF'):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "# check if string starts with IR\n",
    "def starts_with_IR(string):\n",
    "    if string.startswith('IR'):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "# check if string starts with IT\n",
    "def starts_with_IT(string):\n",
    "    if string.startswith('IT'):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# check if string starts with IA\n",
    "def starts_with_IA(string):\n",
    "    if string.startswith('IA'):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# check if string starts with CM\n",
    "def starts_with_CM(string):\n",
    "    if string.startswith('CM'):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "# check if string starts with SO\n",
    "def starts_with_SO(string):\n",
    "    if string.startswith('SO'):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "# Reset negative value to zero    \n",
    "def set_zero_if_negative(number):\n",
    "    if number < 0:\n",
    "        return 0\n",
    "    else:\n",
    "        return number\n",
    "    \n",
    "\n",
    "\n"
   ],
   "outputs": [],
   "execution_count": 1
  },
  {
   "cell_type": "code",
   "id": "4503205e",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:35.310731Z",
     "start_time": "2024-05-31T19:04:35.303818Z"
    }
   },
   "source": [
    "# Check if the string ends with any of the strings in suffix_list\n",
    "def ends_with_any(string, suffix_list):\n",
    "    for suffix in suffix_list:\n",
    "        if string.endswith(suffix):\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "\n",
    "\n",
    "# Check if the string start with Sales\n",
    "def starts_with_Sales(string):\n",
    "    if string.startswith('Sales'):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n"
   ],
   "outputs": [],
   "execution_count": 2
  },
  {
   "cell_type": "code",
   "id": "56b6caa2",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:35.317561Z",
     "start_time": "2024-05-31T19:04:35.310731Z"
    }
   },
   "source": [
    "#add value if current id is in the array, append id with its value if it doesn't\n",
    "def add_value(array, id, value_to_add):\n",
    "    for i, (current_id, current_value) in enumerate(array):\n",
    "        if current_id == id:\n",
    "            array[i] = (current_id, current_value + value_to_add)\n",
    "            break\n",
    "    else:  # This else belongs to the for loop, not the if statement\n",
    "        array.append((id, value_to_add))\n"
   ],
   "outputs": [],
   "execution_count": 3
  },
  {
   "cell_type": "code",
   "id": "c814ac02",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:35.326186Z",
     "start_time": "2024-05-31T19:04:35.317561Z"
    }
   },
   "source": [
    "# update Sales order value if more than the order value were shipped by IF that were not captured by the Sales Order\n",
    "def update_SO_Value(array, id, new_value):\n",
    "    for i, (current_id, current_value) in enumerate(array):\n",
    "        if current_id == id:\n",
    "            if current_value < 0: #sales order quantity count in negative\n",
    "                updated_value = current_value+new_value #update the value by adding the amount shipped\n",
    "                array[i] = (current_id, updated_value)  #update to the array\n",
    "                return updated_value if updated_value > 0 else 0 \n",
    "                #if the amount is greater zero means shipment greater than SO, then return the excess shipped amount. else the shipment is within the order amount return, SO captured already\n",
    "            else: # when current value is not negative, any additional shipment needs to be record and is effecting the inventory level that were not captured by Sales order\n",
    "                updated_value = current_value + new_value\n",
    "                array[i] = (current_id, updated_value)\n",
    "                return new_value #amount of excess shipment\n",
    "            break "
   ],
   "outputs": [],
   "execution_count": 4
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# On hand Inventory level function (single item check)",
   "id": "fc879445bd9768f"
  },
  {
   "cell_type": "code",
   "id": "15ca003f",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:35.341028Z",
     "start_time": "2024-05-31T19:04:35.326907Z"
    }
   },
   "source": [
    "# Calculate the Inventory level (on hand) at each transaction\n",
    "def single_on_hand(df_test):\n",
    "    running_sum=0\n",
    "    for i in range(1,len(df_test)+1):\n",
    "        if(df_test.loc[df_test.index[-i],'Location'] in [\"Seller Warehouse\"]): # If the location is Seller Warehouse\n",
    "            if(starts_with_IR(df_test.loc[df_test.index[-i],'Document Number'])): # If transaction type is \"Inventory Receipt\"\n",
    "                if (df_test.loc[df_test.index[-i],'Restock'] == 'Yes'): # If the restock is Yes\n",
    "                    running_sum += df_test.loc[df_test.index[-i],'Item Count'] # add the item count to the total on hand level\n",
    "                    onhand_lvl.append(running_sum)\n",
    "                else:               \n",
    "                    onhand_lvl.append(running_sum) # level remains the same\n",
    "            else:\n",
    "                onhand_lvl.append(running_sum) # level remains the same\n",
    "        elif (\n",
    "            starts_with_IF(df_test.loc[df_test.index[-i],'Document Number'])): # If transaction type is \"Inventory Fullfillment\"\n",
    "            if(\n",
    "                df_test.loc[df_test.index[-i],'Status'] in [\"Shipped\"]): # status is  shipped\n",
    "                running_sum+=df_test.loc[df_test.index[-i],'Item Count'] # add the item count to the total on hand level\n",
    "                onhand_lvl.append(running_sum)\n",
    "            else:\n",
    "                onhand_lvl.append(running_sum) # level remains the same\n",
    "\n",
    "        elif(\n",
    "            starts_with_IR(df_test.loc[df_test.index[-i],'Document Number'])):  # If transaction type is \"Inventory Receipt\"\n",
    "            if(df_test.loc[df_test.index[-i],'Restock'] == 'No'): # If the restock is No\n",
    "                onhand_lvl.append(running_sum) # level remains the same\n",
    "            else:\n",
    "                running_sum+=df_test.loc[df_test.index[-i],'Item Count'] # Otherwise,add the item count to the total on hand level\n",
    "                onhand_lvl.append(running_sum)\n",
    "        elif(\n",
    "            starts_with_IT(df_test.loc[df_test.index[-i],'Document Number'])): # If transaction type is \"Inventory Transfer\"\n",
    "            running_sum-=df_test.loc[df_test.index[-i],'Item Count'] # Here is only for one by one checking no need to count in real\n",
    "            onhand_lvl.append(running_sum)\n",
    "        elif (\n",
    "                starts_with_SO(df_test.loc[df_test.index[-i],'Document Number'])): # If transaction type is \"Sales order\"\n",
    "                onhand_lvl.append(running_sum)\n",
    "        else:\n",
    "            running_sum+=df_test.loc[df_test.index[-i],'Item Count'] # All other conditions,add the item count to the total on hand level\n",
    "            onhand_lvl.append(running_sum)\n",
    "#     running_sum=set_zero_if_negative(running_sum) # ignore negative inventory level for error checking purpose\n",
    "    return onhand_lvl\n",
    "\n"
   ],
   "outputs": [],
   "execution_count": 5
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Available Inventory level function (single item check)",
   "id": "b97e626939fa6b64"
  },
  {
   "cell_type": "code",
   "id": "2ad2eaf1",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:35.371857Z",
     "start_time": "2024-05-31T19:04:35.342537Z"
    }
   },
   "source": [
    "suffix=[\"QC\", \"QU\",\"FDA Hold\",\"Hold\",\"Returns\"] #locations that has special counting method\n",
    "\n",
    "# Calculate the Inventory available at each transaction\n",
    "def single_ava_check(df_test):\n",
    "    # Initializing values for each parameter, OTHER was to check if the dataframe contains parameter other than IR,IF,IT,IA,SO.\n",
    "    IR=0\n",
    "    IF=0\n",
    "    IT=0\n",
    "    IA=0\n",
    "    SO=0\n",
    "    OTHER=0\n",
    "    Closed_Cases=[] # Create array to record closed cases for Sales order\n",
    "    SO_check=[] # Create array to check Sales order\n",
    "    Cal_Entry=pd.DataFrame(columns=df_test.columns)  # create dataframe to record counted transaction and matches format of the loaded data df_test\n",
    "    Ncount_Entry=pd.DataFrame(columns=df_test.columns) # create dataframe to record uncounted transaction and matches format of the loaded data df_test\n",
    "    running_sum=0  # Initializing the available level to zero\n",
    "    for i in range(1,len(df_test)+1): \n",
    "        # If location is in Seller Warehouse\n",
    "        if(df_test.loc[df_test.index[-i],'Location'] in [\"Seller Warehouse\"]): \n",
    "            if(starts_with_IR(df_test.loc[df_test.index[-i],'Document Number'])):  # If transaction type is \"Inventory Receipt\"\n",
    "                if (df_test.loc[df_test.index[-i],'Restock'] == 'Yes'): # If Restock is yes\n",
    "                    running_sum += df_test.loc[df_test.index[-i],'Item Count'] # add the item count to the total on hand level\n",
    "                    Inventory_lvl.append(running_sum) #Updated Inventory Level\n",
    "                    IR+= df_test.loc[df_test.index[-i],'Item Count'] # Count to IR                   \n",
    "                    Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True) # Counted transaction\n",
    "                else:\n",
    "                    Inventory_lvl.append(running_sum) #Updated Inventory Level which remains the same to the previous one\n",
    "                    Ncount_Entry=pd.concat([Ncount_Entry,df_test.iloc[[-i]]],ignore_index=True) # Not counted Transaction\n",
    "            else:\n",
    "                Inventory_lvl.append(running_sum) #Updated Inventory Level which remains the same to the previous one\n",
    "                Ncount_Entry=pd.concat([Ncount_Entry,df_test.iloc[[-i]]],ignore_index=True) # Not counted Transaction\n",
    "        # If transaction type is \"Sales order\"\n",
    "        elif (\n",
    "                starts_with_SO(df_test.loc[df_test.index[-i],'Document Number'])):\n",
    "            add_value(SO_check,df_test.loc[df_test.index[-i],'Document Number'],df_test.loc[df_test.index[-i],'Item Count'])# Add to So_check\n",
    "            if(df_test.loc[df_test.index[-i],'Status'] in \n",
    "               [\"Cancelled\",\"Pending Approval\"]): #If status is cancel or pending Approval\n",
    "                Inventory_lvl.append(running_sum) #Updated Inventory Level which remains the same to the previous one\n",
    "                Ncount_Entry=pd.concat([Ncount_Entry,df_test.iloc[[-i]]],ignore_index=True) # Not counted Transaction\n",
    "            elif(df_test.loc[df_test.index[-i],'Status'] in \n",
    "               [\"Pending Fulfillment\"]): #If status is cancel or pending fulfillment\n",
    "                running_sum+=df_test.loc[df_test.index[-i],'Item Count']  # add the item count to the total on hand level\n",
    "                Inventory_lvl.append(running_sum) #Updated Inventory Level \n",
    "                SO+=df_test.loc[df_test.index[-i],'Item Count'] #Count to SO\n",
    "                Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True) # Counted transaction\n",
    "            elif(df_test.loc[df_test.index[-i],'Status'] == \"Closed\"): #If status is closed\n",
    "                Closed_Cases.append(df_test.loc[df_test.index[-i],'Document Number']) # Add to closed cases\n",
    "                Inventory_lvl.append(running_sum) #Updated Inventory Level which remains the same to the previous one\n",
    "                Ncount_Entry=pd.concat([Ncount_Entry,df_test.iloc[[-i]]],ignore_index=True) # Not counted Transaction\n",
    "            else:\n",
    "                running_sum+=df_test.loc[df_test.index[-i],'Item Count'] # All other conditions,add the item count to the total on hand level\n",
    "                Inventory_lvl.append(running_sum) #Updated Inventory Level \n",
    "                SO+=df_test.loc[df_test.index[-i],'Item Count'] #Count to SO\n",
    "                Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True) # Counted transaction\n",
    "        # If transaction type is \"Inventory Fullfillment\"\n",
    "        elif (\n",
    "            starts_with_IF(df_test.loc[df_test.index[-i],'Document Number'])): \n",
    "            if(starts_with_Sales(df_test.loc[df_test.index[-i],'Created From'])):\n",
    "                #Extrac the created from sales order\n",
    "                part_after_sales_order = (df_test.loc[df_test.index[-i],'Created From']).split(\"Sales Order #\")[1].strip()\n",
    "                #Count if the sales order is not in inventory detail (i.e. df_test)\n",
    "                if(part_after_sales_order not in (id for id, _ in SO_check)):\n",
    "                    running_sum += df_test.loc[df_test.index[-i],'Item Count'] # add the item count to the total on hand level\n",
    "                    Inventory_lvl.append(running_sum)\n",
    "                    IF+= df_test.loc[df_test.index[-i],'Item Count'] \n",
    "                    Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "                else:\n",
    "                    #If Sales order closed and is in IF then counted\n",
    "                    if(part_after_sales_order in Closed_Cases and df_test.loc[df_test.index[-i],'Status']== \"Shipped\"):\n",
    "                        running_sum += df_test.loc[df_test.index[-i],'Item Count'] # add the item count to the total on hand level\n",
    "                        Inventory_lvl.append(running_sum)\n",
    "                        IF+= df_test.loc[df_test.index[-i],'Item Count']\n",
    "                        Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "                    else:\n",
    "                        #Update the count if excess amount were shipped\n",
    "                        result=update_SO_Value(SO_check,part_after_sales_order,df_test.loc[df_test.index[-i],'Quantity'])\n",
    "                        if (result >0):\n",
    "                            running_sum-=result\n",
    "                            Inventory_lvl.append(running_sum)\n",
    "                            IF-=result\n",
    "                            Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "                        else:\n",
    "                            Inventory_lvl.append(running_sum)\n",
    "                            Ncount_Entry=pd.concat([Ncount_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "            # If it is not created from sales order also need to add to count\n",
    "            else: \n",
    "                running_sum += df_test.loc[df_test.index[-i],'Item Count'] \n",
    "                Inventory_lvl.append(running_sum)\n",
    "                IF+= df_test.loc[df_test.index[-i],'Item Count']\n",
    "                Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "        # If transaction type is \"Inventory Receipt\"\n",
    "        elif(\n",
    "             starts_with_IR(df_test.loc[df_test.index[-i],'Document Number'])):  \n",
    "            if( \n",
    "                df_test.loc[df_test.index[-i],'Restock'] == 'No' \n",
    "                ):\n",
    "                    running_sum=running_sum #The on hand lvl remains the same\n",
    "                    Inventory_lvl.append(running_sum)\n",
    "                    Ncount_Entry=pd.concat([Ncount_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "            elif(ends_with_any(df_test.loc[df_test.index[-i],'Location'],suffix)):\n",
    "                    running_sum=running_sum #The on hand lvl remains the same\n",
    "                    Inventory_lvl.append(running_sum)\n",
    "                    Ncount_Entry=pd.concat([Ncount_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "            else:\n",
    "                running_sum+=df_test.loc[df_test.index[-i],'Item Count'] # Otherwise,add the item count to the total on hand level\n",
    "                Inventory_lvl.append(running_sum)\n",
    "                IR+=df_test.loc[df_test.index[-i],'Item Count']\n",
    "                Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "        # If transaction type is \"Inventory Transfer\"\n",
    "        elif(\n",
    "            starts_with_IT(df_test.loc[df_test.index[-i],'Document Number'])): \n",
    "            # IT count negatively \n",
    "            if(ends_with_any(df_test.loc[df_test.index[-i],'Location'],suffix)):\n",
    "                running_sum-=df_test.loc[df_test.index[-i],'Item Count'] # All other conditions,add the item count to the total on hand level\n",
    "                Inventory_lvl.append(running_sum)\n",
    "                IT-=df_test.loc[df_test.index[-i],'Item Count']\n",
    "                Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "            else:\n",
    "                Inventory_lvl.append(running_sum)\n",
    "                Ncount_Entry=pd.concat([Ncount_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "        # If transaction type is \"Inventory Ajustment\"\n",
    "        elif(\n",
    "            starts_with_IA(df_test.loc[df_test.index[-i],'Document Number'])):\n",
    "            # Not to count when the defined suffix location occurs\n",
    "            if(ends_with_any(df_test.loc[df_test.index[-i],'Location'],suffix)):\n",
    "                running_sum=running_sum\n",
    "                Inventory_lvl.append(running_sum)\n",
    "            else:\n",
    "                running_sum+=df_test.loc[df_test.index[-i],'Item Count'] # Otherwise,add the item count to the total on hand level\n",
    "                Inventory_lvl.append(running_sum)\n",
    "                IA+=df_test.loc[df_test.index[-i],'Item Count']\n",
    "                Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "        else:\n",
    "            running_sum+=df_test.loc[df_test.index[-i],'Item Count'] # All other conditions,add the item count to the total on hand level\n",
    "            Inventory_lvl.append(running_sum)\n",
    "            OTHER+=df_test.loc[df_test.index[-i],'Item Count']\n",
    "            Cal_Entry=pd.concat([Cal_Entry,df_test.iloc[[-i]]],ignore_index=True)\n",
    "#     running_sum=set_zero_if_negative(running_sum) # ignore negative counts\n",
    "    return Inventory_lvl,IR,IT,IF,SO,IA,OTHER,Cal_Entry,Ncount_Entry\n",
    "\n"
   ],
   "outputs": [],
   "execution_count": 6
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Load and filter the data",
   "id": "5c78f20d4fe4478b"
  },
  {
   "cell_type": "code",
   "id": "5ff9ca42",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:37.067959Z",
     "start_time": "2024-05-31T19:04:35.371857Z"
    }
   },
   "source": [
    "df=pd.read_csv(\"531all.csv\",low_memory=False)\n",
    "onhand_lvl=[]\n",
    "Inventory_lvl=[]\n",
    "df_test1=df[df['Document Number'].fillna('').str.startswith(('IF','IR','IA',\"SO\",\"IT\"))]\n",
    "# # Single Inventory on hand check\n",
    "## make sure the date is descending order, might need to modify the date format\n",
    "# df_test1['Date Created']=pd.to_datetime(df_test1['Date Created'])\n",
    "# df_test1=df_test1.sort_values(by='Date Created',ascending=False)"
   ],
   "outputs": [],
   "execution_count": 7
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Enter the Single Item number to check ",
   "id": "7187fcd77b617d5a"
  },
  {
   "cell_type": "code",
   "id": "d0504d24",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:37.162380Z",
     "start_time": "2024-05-31T19:04:37.069520Z"
    }
   },
   "source": [
    "Itemcheck='41121-110-10560-11806'\n",
    "single_on_hand(df_test1[df_test1['Item']==Itemcheck])\n",
    "df_test_single=df_test1[df_test1['Item']==Itemcheck]\n"
   ],
   "outputs": [],
   "execution_count": 8
  },
  {
   "cell_type": "code",
   "id": "228ecd94",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:37.169137Z",
     "start_time": "2024-05-31T19:04:37.164353Z"
    }
   },
   "source": "df_test_single.insert(13,'Onhand_lvl',onhand_lvl[::-1]) # Insert the reverse of the list",
   "outputs": [],
   "execution_count": 9
  },
  {
   "cell_type": "code",
   "id": "17267828",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:37.707105Z",
     "start_time": "2024-05-31T19:04:37.171852Z"
    }
   },
   "source": [
    "KEY=single_ava_check(df_test1[df_test1['Item']==Itemcheck])\n",
    "df_test_single.insert(15,'Available_lvl',Inventory_lvl[::-1]) # Insert the reverse of the list\n",
    "df_test_single"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "        Internal ID         Number                   Item Document Number  \\\n",
       "559         9917144  YC/DB20230418  41121-110-10560-11806   SO-GWI-135135   \n",
       "1092        9903599  YC/DB20230418  41121-110-10560-11806        IF127948   \n",
       "1266        9898414  YC/DB20230914  41121-110-10560-11806        IF127908   \n",
       "1276        9898404  YC/DB20230914  41121-110-10560-11806   SO-GWI-134947   \n",
       "1375        9895698  YC/DB20230418  41121-110-10560-11806   SO-GWI-134908   \n",
       "...             ...            ...                    ...             ...   \n",
       "321052      1865793     YC20201109  41121-110-10560-11806         IR43154   \n",
       "321053      1865793     YC20201109  41121-110-10560-11806         IR43154   \n",
       "321054      1865793     YC20201109  41121-110-10560-11806         IR43154   \n",
       "321055      1865793     YC20201109  41121-110-10560-11806         IR43154   \n",
       "322180      1943651     YC20201109  41121-110-10560-11806    SO-GWI-46410   \n",
       "\n",
       "              Date Created               Status        Item Program  \\\n",
       "559      5/30/2024 7:07 am  Pending Fulfillment  Regular SD Program   \n",
       "1092     5/29/2024 6:18 am              Shipped  Regular SD Program   \n",
       "1266     5/28/2024 2:25 pm              Shipped  Regular SD Program   \n",
       "1276     5/28/2024 1:56 pm               Billed  Regular SD Program   \n",
       "1375    5/28/2024 11:49 am               Billed  Regular SD Program   \n",
       "...                    ...                  ...                 ...   \n",
       "321052   2/12/2021 6:23 am                  NaN                 NaN   \n",
       "321053   2/12/2021 6:23 am                  NaN                 NaN   \n",
       "321054   2/12/2021 6:23 am                  NaN                 NaN   \n",
       "321055   2/12/2021 6:23 am                  NaN                 NaN   \n",
       "322180    2/8/2021 2:35 pm               Billed  Regular SD Program   \n",
       "\n",
       "        Back Ordered        Location Bin Number Restock  Quantity  Item Count  \\\n",
       "559              NaN  GWI-New-Jersey        NaN     NaN     500.0      -500.0   \n",
       "1092             NaN  GWI-New-Jersey      E-100     NaN    1000.0     -1000.0   \n",
       "1266             NaN       GWI-Chino    RL-40-E     NaN      20.0       -20.0   \n",
       "1276             NaN       GWI-Chino        NaN     NaN      20.0       -20.0   \n",
       "1375             NaN  GWI-New-Jersey        NaN     NaN    1000.0     -1000.0   \n",
       "...              ...             ...        ...     ...       ...         ...   \n",
       "321052           NaN  GWI-New-Jersey   N-C-22-A     NaN     500.0       500.0   \n",
       "321053           NaN  GWI-New-Jersey   N-H-19-A     NaN    1000.0      1000.0   \n",
       "321054           NaN  GWI-New-Jersey   N-H-08-A     NaN     500.0       500.0   \n",
       "321055           NaN  GWI-New-Jersey   N-D-16-A     NaN     500.0       500.0   \n",
       "322180           NaN  GWI-New-Jersey        NaN     NaN      40.0       -40.0   \n",
       "\n",
       "        Onhand_lvl  On Hand  Available_lvl  Available Expiration Date  \\\n",
       "559        24300.0  24300.0        23600.0    23600.0       4/17/2025   \n",
       "1092       24300.0  24300.0        24100.0    23600.0       4/17/2025   \n",
       "1266       25300.0  24300.0        24100.0    23600.0       9/13/2025   \n",
       "1276       25320.0  24300.0        24100.0    23600.0       9/13/2025   \n",
       "1375       25320.0  24300.0        24120.0    23600.0       4/17/2025   \n",
       "...            ...      ...            ...        ...             ...   \n",
       "321052      2500.0  24300.0         2460.0    23600.0       11/8/2022   \n",
       "321053      2000.0  24300.0         1960.0    23600.0       11/8/2022   \n",
       "321054      1000.0  24300.0          960.0    23600.0       11/8/2022   \n",
       "321055       500.0  24300.0          460.0    23600.0       11/8/2022   \n",
       "322180         0.0  24300.0          -40.0    23600.0       11/8/2022   \n",
       "\n",
       "                        Created From  \n",
       "559                              NaN  \n",
       "1092      Sales Order #SO-GWI-134908  \n",
       "1266      Sales Order #SO-GWI-134947  \n",
       "1276                             NaN  \n",
       "1375                             NaN  \n",
       "...                              ...  \n",
       "321052  Purchase Order #PO-GWI-40999  \n",
       "321053  Purchase Order #PO-GWI-40999  \n",
       "321054  Purchase Order #PO-GWI-40999  \n",
       "321055  Purchase Order #PO-GWI-40999  \n",
       "322180                           NaN  \n",
       "\n",
       "[465 rows x 19 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Internal ID</th>\n",
       "      <th>Number</th>\n",
       "      <th>Item</th>\n",
       "      <th>Document Number</th>\n",
       "      <th>Date Created</th>\n",
       "      <th>Status</th>\n",
       "      <th>Item Program</th>\n",
       "      <th>Back Ordered</th>\n",
       "      <th>Location</th>\n",
       "      <th>Bin Number</th>\n",
       "      <th>Restock</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Item Count</th>\n",
       "      <th>Onhand_lvl</th>\n",
       "      <th>On Hand</th>\n",
       "      <th>Available_lvl</th>\n",
       "      <th>Available</th>\n",
       "      <th>Expiration Date</th>\n",
       "      <th>Created From</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>559</th>\n",
       "      <td>9917144</td>\n",
       "      <td>YC/DB20230418</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>SO-GWI-135135</td>\n",
       "      <td>5/30/2024 7:07 am</td>\n",
       "      <td>Pending Fulfillment</td>\n",
       "      <td>Regular SD Program</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-New-Jersey</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>-500.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>4/17/2025</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1092</th>\n",
       "      <td>9903599</td>\n",
       "      <td>YC/DB20230418</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>IF127948</td>\n",
       "      <td>5/29/2024 6:18 am</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>Regular SD Program</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-New-Jersey</td>\n",
       "      <td>E-100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>-1000.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>24100.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>4/17/2025</td>\n",
       "      <td>Sales Order #SO-GWI-134908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1266</th>\n",
       "      <td>9898414</td>\n",
       "      <td>YC/DB20230914</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>IF127908</td>\n",
       "      <td>5/28/2024 2:25 pm</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>Regular SD Program</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-Chino</td>\n",
       "      <td>RL-40-E</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>25300.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>24100.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>9/13/2025</td>\n",
       "      <td>Sales Order #SO-GWI-134947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276</th>\n",
       "      <td>9898404</td>\n",
       "      <td>YC/DB20230914</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>SO-GWI-134947</td>\n",
       "      <td>5/28/2024 1:56 pm</td>\n",
       "      <td>Billed</td>\n",
       "      <td>Regular SD Program</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-Chino</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>25320.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>24100.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>9/13/2025</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1375</th>\n",
       "      <td>9895698</td>\n",
       "      <td>YC/DB20230418</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>SO-GWI-134908</td>\n",
       "      <td>5/28/2024 11:49 am</td>\n",
       "      <td>Billed</td>\n",
       "      <td>Regular SD Program</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-New-Jersey</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>-1000.0</td>\n",
       "      <td>25320.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>24120.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>4/17/2025</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>321052</th>\n",
       "      <td>1865793</td>\n",
       "      <td>YC20201109</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>IR43154</td>\n",
       "      <td>2/12/2021 6:23 am</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-New-Jersey</td>\n",
       "      <td>N-C-22-A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>2460.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>11/8/2022</td>\n",
       "      <td>Purchase Order #PO-GWI-40999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>321053</th>\n",
       "      <td>1865793</td>\n",
       "      <td>YC20201109</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>IR43154</td>\n",
       "      <td>2/12/2021 6:23 am</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-New-Jersey</td>\n",
       "      <td>N-H-19-A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>11/8/2022</td>\n",
       "      <td>Purchase Order #PO-GWI-40999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>321054</th>\n",
       "      <td>1865793</td>\n",
       "      <td>YC20201109</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>IR43154</td>\n",
       "      <td>2/12/2021 6:23 am</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-New-Jersey</td>\n",
       "      <td>N-H-08-A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>960.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>11/8/2022</td>\n",
       "      <td>Purchase Order #PO-GWI-40999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>321055</th>\n",
       "      <td>1865793</td>\n",
       "      <td>YC20201109</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>IR43154</td>\n",
       "      <td>2/12/2021 6:23 am</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-New-Jersey</td>\n",
       "      <td>N-D-16-A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>460.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>11/8/2022</td>\n",
       "      <td>Purchase Order #PO-GWI-40999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>322180</th>\n",
       "      <td>1943651</td>\n",
       "      <td>YC20201109</td>\n",
       "      <td>41121-110-10560-11806</td>\n",
       "      <td>SO-GWI-46410</td>\n",
       "      <td>2/8/2021 2:35 pm</td>\n",
       "      <td>Billed</td>\n",
       "      <td>Regular SD Program</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GWI-New-Jersey</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40.0</td>\n",
       "      <td>-40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24300.0</td>\n",
       "      <td>-40.0</td>\n",
       "      <td>23600.0</td>\n",
       "      <td>11/8/2022</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>465 rows × 19 columns</p>\n",
       "</div>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 10
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Calcualated result breakdown",
   "id": "7a59ab33e3af990d"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:37.716210Z",
     "start_time": "2024-05-31T19:04:37.708107Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(Itemcheck)\n",
    "print(f\"IR={KEY[1]}\")\n",
    "print(f\"IT={KEY[2]}\")\n",
    "print(f\"IF={KEY[3]}\")\n",
    "print(f\"SO={KEY[4]}\")\n",
    "print(f\"IA={KEY[5]}\")\n",
    "print(f\"other={KEY[6]} (should be 0 when all other conditions considered)\")\n",
    "print(f\"Calculated available={sum(KEY[1:6])}\")\n",
    "print(f\"NetSuite available={df_test_single['Available'].iloc[1]}\")"
   ],
   "id": "b515a54baf476bef",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41121-110-10560-11806\n",
      "IR=355160.0\n",
      "IT=1680.0\n",
      "IF=-4600.0\n",
      "SO=-328640.0\n",
      "IA=0.0\n",
      "other=0 (should be 0 when all other conditions considered)\n",
      "Calculated available=23600.0\n",
      "NetSuite available=23600.0\n"
     ]
    }
   ],
   "execution_count": 11
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Error Checking",
   "id": "672b47cea5b450a0"
  },
  {
   "cell_type": "code",
   "id": "6c4f6d74",
   "metadata": {
    "tags": [],
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:37.723902Z",
     "start_time": "2024-05-31T19:04:37.717212Z"
    }
   },
   "source": [
    "# Transactions that are not counted in the calculation\n",
    "Calculated_rows=pd.DataFrame(KEY[7])\n",
    "# Calculated_rows[Calculated_rows['Document Number']=='IA6043']\n",
    "# Calculated_rows.to_csv(\"Calculated_rows520.csv\",index=False)"
   ],
   "outputs": [],
   "execution_count": 12
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:37.730130Z",
     "start_time": "2024-05-31T19:04:37.725903Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Transactions that are counted in the calculation\n",
    "noCalculated_rows=pd.DataFrame(KEY[8])\n",
    "# noCalculated_rows[noCalculated_rows['Document Number']=='IA6043']"
   ],
   "id": "c7bfd76d49fa39e6",
   "outputs": [],
   "execution_count": 13
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:37.750668Z",
     "start_time": "2024-05-31T19:04:37.733132Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Check calculated transaction and calculate the aggregate sum for each unique transaction\n",
    "Breakdownrows=Calculated_rows[Calculated_rows['Document Number'].str.startswith('SO')]\n",
    "Breakdownrows.groupby('Document Number').agg(Quantity_Sum=('Item Count', 'sum'))"
   ],
   "id": "903fc41c25e6a1b",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "                 Quantity_Sum\n",
       "Document Number              \n",
       "SO-GWI-100081           -20.0\n",
       "SO-GWI-100428          -100.0\n",
       "SO-GWI-100753        -18440.0\n",
       "SO-GWI-100754         -7100.0\n",
       "SO-GWI-100755        -18000.0\n",
       "...                       ...\n",
       "SO-GWI-97981         -20360.0\n",
       "SO-GWI-98233            -20.0\n",
       "SO-GWI-98379         -17980.0\n",
       "SO-GWI-98901            -80.0\n",
       "SO-GWI-99366           -800.0\n",
       "\n",
       "[123 rows x 1 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Quantity_Sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Document Number</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>SO-GWI-100081</th>\n",
       "      <td>-20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-100428</th>\n",
       "      <td>-100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-100753</th>\n",
       "      <td>-18440.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-100754</th>\n",
       "      <td>-7100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-100755</th>\n",
       "      <td>-18000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-97981</th>\n",
       "      <td>-20360.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-98233</th>\n",
       "      <td>-20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-98379</th>\n",
       "      <td>-17980.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-98901</th>\n",
       "      <td>-80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-99366</th>\n",
       "      <td>-800.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>123 rows × 1 columns</p>\n",
       "</div>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 14
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:37.769581Z",
     "start_time": "2024-05-31T19:04:37.750668Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Check non calculated transaction and calculate the aggregate sum for each unique transaction\n",
    "Breakdownrows = noCalculated_rows[noCalculated_rows['Document Number'].str.startswith(('SO', 'IF'))]\n",
    "Breakdownrows.groupby('Document Number').agg(Quantity_Sum=('Item Count', 'sum'))"
   ],
   "id": "7ea0d492c478773c",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "                 Quantity_Sum\n",
       "Document Number              \n",
       "IF100586                -40.0\n",
       "IF101043               -160.0\n",
       "IF101296                -40.0\n",
       "IF102043                -20.0\n",
       "IF102367              -1500.0\n",
       "...                       ...\n",
       "IF96482              -18000.0\n",
       "IF97684              -18000.0\n",
       "IF98618               -3000.0\n",
       "IF98624               -1500.0\n",
       "IF98893               -1280.0\n",
       "\n",
       "[122 rows x 1 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Quantity_Sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Document Number</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>IF100586</th>\n",
       "      <td>-40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF101043</th>\n",
       "      <td>-160.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF101296</th>\n",
       "      <td>-40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF102043</th>\n",
       "      <td>-20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF102367</th>\n",
       "      <td>-1500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF96482</th>\n",
       "      <td>-18000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF97684</th>\n",
       "      <td>-18000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF98618</th>\n",
       "      <td>-3000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF98624</th>\n",
       "      <td>-1500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF98893</th>\n",
       "      <td>-1280.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>122 rows × 1 columns</p>\n",
       "</div>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 15
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Check inventory calculation with Tableau",
   "id": "56c946d9c2d9d2a6"
  },
  {
   "cell_type": "code",
   "id": "8dfc012f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:38.315335Z",
     "start_time": "2024-05-31T19:04:37.771155Z"
    }
   },
   "source": [
    "py_cal=Calculated_rows\n",
    "tableau_cal=pd.read_excel(\"41121.xlsx\") # Read the file\n",
    "tableau_cal=tableau_cal[tableau_cal['Tran Id (Datamart Inventory)'].notna()] # filter out the NA"
   ],
   "outputs": [],
   "execution_count": 16
  },
  {
   "cell_type": "code",
   "id": "349e7f01",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:38.331521Z",
     "start_time": "2024-05-31T19:04:38.315335Z"
    }
   },
   "source": [
    "tableau_cal= tableau_cal.iloc[:,[1,-1]]\n",
    "tableau_cal.columns=['Document Number','Item Count tableau']\n",
    "tableau_cal"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "    Document Number  Item Count tableau\n",
       "0            IA8095                 0.0\n",
       "1            IA8449                 0.0\n",
       "2            IA8465                20.0\n",
       "3            IA8512               -20.0\n",
       "4             IT882            -13000.0\n",
       "..              ...                 ...\n",
       "299   SO-GWI-133777              -300.0\n",
       "300   SO-GWI-134908             -1000.0\n",
       "301   SO-GWI-134947               -20.0\n",
       "302   SO-GWI-135135              -500.0\n",
       "303           Total             23620.0\n",
       "\n",
       "[304 rows x 2 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Document Number</th>\n",
       "      <th>Item Count tableau</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IA8095</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IA8449</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IA8465</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IA8512</td>\n",
       "      <td>-20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IT882</td>\n",
       "      <td>-13000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>SO-GWI-133777</td>\n",
       "      <td>-300.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>SO-GWI-134908</td>\n",
       "      <td>-1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>SO-GWI-134947</td>\n",
       "      <td>-20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>SO-GWI-135135</td>\n",
       "      <td>-500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>Total</td>\n",
       "      <td>23620.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>304 rows × 2 columns</p>\n",
       "</div>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 17
  },
  {
   "cell_type": "code",
   "id": "88013829",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:38.348858Z",
     "start_time": "2024-05-31T19:04:38.331521Z"
    }
   },
   "source": [
    "py=py_cal.iloc[:,[3,-5]]\n",
    "py=py_cal.groupby('Document Number').agg(Quantity_Sum=('Item Count', 'sum'))\n",
    "py"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "                 Quantity_Sum\n",
       "Document Number              \n",
       "IA8095                    0.0\n",
       "IA8449                    0.0\n",
       "IA8465                   20.0\n",
       "IA8512                  -20.0\n",
       "IF121915               -100.0\n",
       "...                       ...\n",
       "SO-GWI-97981         -20360.0\n",
       "SO-GWI-98233            -20.0\n",
       "SO-GWI-98379         -17980.0\n",
       "SO-GWI-98901            -80.0\n",
       "SO-GWI-99366           -800.0\n",
       "\n",
       "[173 rows x 1 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Quantity_Sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Document Number</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>IA8095</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IA8449</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IA8465</th>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IA8512</th>\n",
       "      <td>-20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF121915</th>\n",
       "      <td>-100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-97981</th>\n",
       "      <td>-20360.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-98233</th>\n",
       "      <td>-20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-98379</th>\n",
       "      <td>-17980.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-98901</th>\n",
       "      <td>-80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO-GWI-99366</th>\n",
       "      <td>-800.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>173 rows × 1 columns</p>\n",
       "</div>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 18
  },
  {
   "cell_type": "code",
   "id": "98635ff3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:38.365659Z",
     "start_time": "2024-05-31T19:04:38.349860Z"
    }
   },
   "source": [
    "merge_so=pd.merge(py,tableau_cal,on='Document Number',how='outer')\n",
    "merge_so['Quantity_Sum']=merge_so['Quantity_Sum'].fillna(0)\n",
    "merge_so"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "    Document Number  Quantity_Sum  Item Count tableau\n",
       "0            IA8095           0.0                 0.0\n",
       "1            IA8449           0.0                 0.0\n",
       "2            IA8465          20.0                20.0\n",
       "3            IA8512         -20.0               -20.0\n",
       "4          IF121915        -100.0                 0.0\n",
       "..              ...           ...                 ...\n",
       "299   SO-GWI-111020           0.0                 0.0\n",
       "300   SO-GWI-118144           0.0                 0.0\n",
       "301   SO-GWI-118770           0.0                 0.0\n",
       "302   SO-GWI-121635           0.0                 0.0\n",
       "303           Total           0.0             23620.0\n",
       "\n",
       "[304 rows x 3 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Document Number</th>\n",
       "      <th>Quantity_Sum</th>\n",
       "      <th>Item Count tableau</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IA8095</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IA8449</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IA8465</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IA8512</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>-20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IF121915</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>SO-GWI-111020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>SO-GWI-118144</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>SO-GWI-118770</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>SO-GWI-121635</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>Total</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23620.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>304 rows × 3 columns</p>\n",
       "</div>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 19
  },
  {
   "cell_type": "code",
   "id": "f0d5cdae",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:38.381282Z",
     "start_time": "2024-05-31T19:04:38.366661Z"
    }
   },
   "source": [
    "merge_so['Check']= merge_so['Quantity_Sum'] == merge_so['Item Count tableau']\n",
    "merge_so"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "    Document Number  Quantity_Sum  Item Count tableau  Check\n",
       "0            IA8095           0.0                 0.0   True\n",
       "1            IA8449           0.0                 0.0   True\n",
       "2            IA8465          20.0                20.0   True\n",
       "3            IA8512         -20.0               -20.0   True\n",
       "4          IF121915        -100.0                 0.0  False\n",
       "..              ...           ...                 ...    ...\n",
       "299   SO-GWI-111020           0.0                 0.0   True\n",
       "300   SO-GWI-118144           0.0                 0.0   True\n",
       "301   SO-GWI-118770           0.0                 0.0   True\n",
       "302   SO-GWI-121635           0.0                 0.0   True\n",
       "303           Total           0.0             23620.0  False\n",
       "\n",
       "[304 rows x 4 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Document Number</th>\n",
       "      <th>Quantity_Sum</th>\n",
       "      <th>Item Count tableau</th>\n",
       "      <th>Check</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IA8095</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IA8449</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IA8465</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IA8512</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IF121915</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>SO-GWI-111020</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>SO-GWI-118144</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>SO-GWI-118770</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>SO-GWI-121635</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>Total</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23620.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>304 rows × 4 columns</p>\n",
       "</div>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 20
  },
  {
   "cell_type": "code",
   "id": "26f314eb",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:38.397421Z",
     "start_time": "2024-05-31T19:04:38.381282Z"
    }
   },
   "source": [
    "k_discrepancy=merge_so[merge_so['Check']==False]\n",
    "k_discrepancy\n",
    "# k_discrepancy.to_excel('xxxxxx.xlsx', index=False, engine='openpyxl')"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "    Document Number  Quantity_Sum  Item Count tableau  Check\n",
       "4          IF121915        -100.0                 0.0  False\n",
       "5           IF47331       -4500.0                 0.0  False\n",
       "12         IR112603        3520.0              3520.0  False\n",
       "15          IR43154       12000.0             12000.0  False\n",
       "31           IT1086       -1360.0              1360.0  False\n",
       "32           IT1107          20.0               -20.0  False\n",
       "33           IT1433        -500.0               500.0  False\n",
       "34           IT1595         580.0              -580.0  False\n",
       "35           IT1596         -20.0                20.0  False\n",
       "36           IT1632        -440.0               440.0  False\n",
       "37           IT1656       18000.0            -18000.0  False\n",
       "38           IT1713      -18000.0             18000.0  False\n",
       "39           IT1834         200.0              -200.0  False\n",
       "40           IT1861       18000.0            -18000.0  False\n",
       "41           IT1931          20.0               -20.0  False\n",
       "42           IT1946      -18000.0             18000.0  False\n",
       "43           IT1962        -180.0               180.0  False\n",
       "44           IT1968       18000.0            -18000.0  False\n",
       "45           IT1996      -18000.0             18000.0  False\n",
       "46           IT2003       14000.0            -14000.0  False\n",
       "47           IT2141      -14000.0             14000.0  False\n",
       "48            IT882       13000.0            -13000.0  False\n",
       "49            IT916      -13000.0             13000.0  False\n",
       "64    SO-GWI-108199         -20.0                 0.0  False\n",
       "93    SO-GWI-128622        -100.0              -200.0  False\n",
       "122    SO-GWI-50453        -500.0             -5000.0  False\n",
       "303           Total           0.0             23620.0  False"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Document Number</th>\n",
       "      <th>Quantity_Sum</th>\n",
       "      <th>Item Count tableau</th>\n",
       "      <th>Check</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IF121915</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>IF47331</td>\n",
       "      <td>-4500.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>IR112603</td>\n",
       "      <td>3520.0</td>\n",
       "      <td>3520.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>IR43154</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>IT1086</td>\n",
       "      <td>-1360.0</td>\n",
       "      <td>1360.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>IT1107</td>\n",
       "      <td>20.0</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>IT1433</td>\n",
       "      <td>-500.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>IT1595</td>\n",
       "      <td>580.0</td>\n",
       "      <td>-580.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>IT1596</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>IT1632</td>\n",
       "      <td>-440.0</td>\n",
       "      <td>440.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>IT1656</td>\n",
       "      <td>18000.0</td>\n",
       "      <td>-18000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>IT1713</td>\n",
       "      <td>-18000.0</td>\n",
       "      <td>18000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>IT1834</td>\n",
       "      <td>200.0</td>\n",
       "      <td>-200.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>IT1861</td>\n",
       "      <td>18000.0</td>\n",
       "      <td>-18000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>IT1931</td>\n",
       "      <td>20.0</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>IT1946</td>\n",
       "      <td>-18000.0</td>\n",
       "      <td>18000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>IT1962</td>\n",
       "      <td>-180.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>IT1968</td>\n",
       "      <td>18000.0</td>\n",
       "      <td>-18000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>IT1996</td>\n",
       "      <td>-18000.0</td>\n",
       "      <td>18000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>IT2003</td>\n",
       "      <td>14000.0</td>\n",
       "      <td>-14000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>IT2141</td>\n",
       "      <td>-14000.0</td>\n",
       "      <td>14000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>IT882</td>\n",
       "      <td>13000.0</td>\n",
       "      <td>-13000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>IT916</td>\n",
       "      <td>-13000.0</td>\n",
       "      <td>13000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>SO-GWI-108199</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>SO-GWI-128622</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>-200.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>SO-GWI-50453</td>\n",
       "      <td>-500.0</td>\n",
       "      <td>-5000.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>Total</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23620.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 21
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:38.428386Z",
     "start_time": "2024-05-31T19:04:38.397589Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Check each type of transaction amount from tableau\n",
    "tab_SO=tableau_cal[tableau_cal['Document Number'].str.startswith('SO')]\n",
    "tab_SO=tab_SO.agg(Quantity_Sum=('Item Count tableau', 'sum'))\n",
    "tab_IR=tableau_cal[tableau_cal['Document Number'].str.startswith('IR')]\n",
    "tab_IR=tab_IR.agg(Quantity_Sum=('Item Count tableau', 'sum'))\n",
    "tab_IA=tableau_cal[tableau_cal['Document Number'].str.startswith('IA')]\n",
    "tab_IA=tab_IA.agg(Quantity_Sum=('Item Count tableau', 'sum'))\n",
    "tab_IF=tableau_cal[tableau_cal['Document Number'].str.startswith('IF')]\n",
    "tab_IF=tab_IF.agg(Quantity_Sum=('Item Count tableau', 'sum'))\n"
   ],
   "id": "94d5fbe4d9ca8e8b",
   "outputs": [],
   "execution_count": 22
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T19:04:38.434867Z",
     "start_time": "2024-05-31T19:04:38.429389Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Display all dataset\n",
    "pd.set_option('display.max_rows', None)"
   ],
   "id": "1234e6e5",
   "outputs": [],
   "execution_count": 23
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
